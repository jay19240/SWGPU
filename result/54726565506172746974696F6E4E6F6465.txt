* Class: TreePartitionNode

The `TreePartitionNode` class represents a generic node in a binary tree partition data structure, which can be used
to organize and search for objects of type T.
** Methods
- ''addChild''(object: T): void~
The "addChild" function adds an object to the tree node's children, creating subnodes if maxChildren is exceeded.~
-- ''object'': The parameter "object" is of type T, which means it can be any type of object.~
~
- ''createSubNodes''(): void~
The "createSubNodes" function split and move children in two sub-nodes.~
~
- ''getChildren''()~
The "getChildren" function returns children of the node.~
~
- ''getDepth''(): number~
The "getDepth" function returns the depth of the node.~
~
- ''getLeft''()~
The "getLeft" function returns the left node.~
~
- ''getMethod''(): ITreePartitionMethod~
The "getMethod" function returns the tree partition method used.~
~
- ''getRight''()~
The "getRight" function returns the right node.~
~
- ''reset''(): void~
The "reset" function clear the node.~
~
- ''search''(params: any[])~
The search function call the search's method and return matching objects.~
-- ''params'': The `params` parameter in the `search` method.~
~
- ''setDepth''(depth: number): void~
The "setDepth" function sets the depth node to a specified value.~
-- ''depth'': The depth parameter is a number that represents the depth of the node.~
** Constructors
- ''new TreePartitionNode''(tree: TreePartition, depth: number, method: ITreePartitionMethod): TreePartitionNode~
This is a constructor.~
-- ''tree'': The `tree` parameter is an instance of the `TreePartition` class, which represents a
partitioned tree data structure. It contains the data and structure of the tree.~
-- ''depth'': The "depth" parameter represents the maximum depth of the tree partition. It
determines how many levels the tree will have.~
-- ''method'': The `method` parameter is an object that implements the `ITreePartitionMethod`
interface. This interface defines a method for partitioning a tree. The `method` object is used to
determine how the tree should be partitioned at each level of the tree.~
